/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    id 'java'
    id 'war'
    id 'maven-publish'
    id 'org.hidetake.ssh' version "2.11.2"
}

apply plugin: 'org.hidetake.ssh'

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}
dependencies {
    // Servlet API (provided by container)
    compileOnly 'jakarta.servlet:jakarta.servlet-api:6.1.0'

    // JSTL
    implementation 'jakarta.servlet.jsp.jstl:jakarta.servlet.jsp.jstl-api:3.0.1'
    implementation 'org.glassfish.web:jakarta.servlet.jsp.jstl:3.0.1'

    // MySQL connector
    implementation 'mysql:mysql-connector-java:8.0.33'

    // JavaMail
    implementation 'com.sun.mail:javax.mail:1.6.2'
    implementation 'com.sun.mail:jakarta.mail:2.0.1'

    // Jackson
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.17.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.15.3'

    // Gson
    implementation 'com.google.code.gson:gson:2.8.9'

    // Apache HttpCore & Fluent HC
    implementation 'org.apache.httpcomponents.core5:httpcore5:5.2.4'
    implementation 'org.apache.httpcomponents:fluent-hc:4.5.13'

    // Google HTTP Client
    implementation 'com.google.http-client:google-http-client:1.45.0'

    // JUnit 5
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.11.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.11.0'

    // Apache Commons DBCP2 (connection pooling)
    implementation 'org.apache.commons:commons-dbcp2:2.9.0'

}

group = 'com.example'
version = '1.0-SNAPSHOT'
description = 'provide_vaccine_services'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

publishing {
    publications {
        maven(MavenPublication) {
            from(components.java)
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}

remotes {
    host {
        host = '160.250.247.127'
        user = 'root'
        password = 'A2zoTK7OQuEZVwdi'
    }
}

ssh.settings {
    dryRun = project.hasProperty('dryRun')
    knownHosts = allowAnyHosts
}


tasks.register('print_version') {
    doLast {
        println ssh.version
    }
}

task docker_app_start {
    doLast {
        println ssh.version
        println 'begin docker_app_start'
        ssh.run {
            session(remotes.host) {
                execute '''
                    docker rm -f tomcat10 || true &&
                    docker run -d --name tomcat10 \
                    -v /usr/deploy:/usr/local/tomcat/webapps \
                    -p 8081:8080 tomcat:10.1.34
                '''
            }
        }
    }
}

task docker_upload_file_to_server {
    doLast {
        println 'Uploading file to Linux server...'
        ssh.run {
            session(remotes.host) {

                // Xóa file cũ nếu có
                remove '/usr/deploy/ROOT.war'

                // Upload file
                put from: "${project.projectDir}/build/libs/provide_vaccine_services-1.0-SNAPSHOT.war",
                        into: "/usr/deploy/ROOT.war"

            }
        }
    }
}

task docker_deploy {
    docker_deploy.dependsOn docker_app_start
    docker_deploy.dependsOn docker_upload_file_to_server
    docker_deploy.dependsOn build
    tasks.getByName('docker_app_start').mustRunAfter docker_upload_file_to_server
}

